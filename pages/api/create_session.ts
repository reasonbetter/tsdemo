import type { NextApiRequest, NextApiResponse } from 'next';
import { prisma } from '@/lib/prisma';
import { Prisma } from '@prisma/client';

// Define the expected structure of the request body
interface CreateSessionRequest {
  sessionId: string; // The ID generated by the frontend
  userTag?: string;
}

interface ErrorResponse {
  error: string;
  code?: string;
  details?: string;
}

export default async function handler(req: NextApiRequest, res: NextApiResponse<any | ErrorResponse>) {
  if (req.method !== 'POST') {
    return res.status(405).json({ 
      error: 'Method not allowed', 
      code: 'METHOD_NOT_ALLOWED',
      details: 'Only POST requests are accepted' 
    });
  }

  try {
    const { sessionId, userTag } = req.body as CreateSessionRequest;

    if (!sessionId) {
        return res.status(400).json({ 
          error: 'Missing required field', 
          code: 'VALIDATION_ERROR',
          details: 'sessionId is required' 
        });
    }

    // Define the initial state for the session
    const initialCoverage = { confounding: 0, temporality: 0, complexity: 0 };

    // Create the new session in the database.
    // We use upsert to handle potential race conditions if the client calls this twice (e.g., React Strict Mode in development).
    const session = await prisma.session.upsert({
      where: { id: sessionId },
      update: { 
        // If the session somehow already exists, we can update the userTag if provided.
        userTag: userTag || undefined 
      },
      create: {
        id: sessionId,
        userTag: userTag || null,
        // Defaults for thetaMean (0.0), thetaVar (1.5), status (ACTIVE) are handled by the Prisma schema.
        askedItemIds: [],
        // Ensure JSONB compatibility for Prisma
        coverageCounts: initialCoverage as Prisma.JsonObject,
      },
    });

    return res.status(201).json({ 
        sessionId: session.id, 
        status: session.status,
        thetaMean: session.thetaMean,
        thetaVar: session.thetaVar
    });

  } catch (err) {
    if (process.env.NODE_ENV !== 'production') {
      console.error("Create session error:", err);
    }
    return res.status(500).json({ 
      error: "Failed to create session", 
      code: "INTERNAL_ERROR",
      details: (err as Error).message 
    });
  }
}
