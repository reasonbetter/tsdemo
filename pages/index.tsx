import { useEffect, useMemo, useState, FormEvent, useRef } from "react";
import ReactMarkdown from 'react-markdown'; // Import ReactMarkdown
// Using the path alias defined in tsconfig.json
import bankData from "@/data/itemBank.json";
import {
  ItemBank,
  ItemInstance,
  AJJudgment,
  AJFeatures,
  ProbeIntent,
  TurnResult,
  ThetaState,
  HistoryEntry,
  AJLabel
} from '@/types/assessment';

// Type assertion for the imported JSON data
const bank: ItemBank = bankData as ItemBank;

interface AwaitingProbeState {
  probeType: ProbeIntent;
  prompt: string;
  pending: {
    aj: AJJudgment;
    next_item_id: string | null;
  };
}

// Helper component for rendering markdown prompts professionally
const Prose = ({ children }: { children: string }) => (
    // This div acts as a mini-prose container.
    // It styles paragraphs, lists (for items like C5), and handles bold/italic text rendered by ReactMarkdown.
    // We use arbitrary variants ([&>p]:mb-4) to style children generated by ReactMarkdown.
    <div className="text-lg leading-relaxed text-foreground mb-6 [&>p]:mb-4 [&>ul]:list-disc [&>ul]:pl-5 [&>li]:mb-2">
      <ReactMarkdown>{children}</ReactMarkdown>
    </div>
  );


export default function Home() {
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [sessionInitialized, setSessionInitialized] = useState(false);
  const [userTag, setUserTag] = useState("");

  const initialItemId = bank.items[0]?.item_id;
  const [currentId, setCurrentId] = useState<string>(initialItemId);

  const [input, setInput] = useState("");
  const [probeInput, setProbeInput] = useState("");
  const [log, setLog] = useState<string[]>([]);
  const [history, setHistory] = useState<HistoryEntry[]>([]);
  const [awaitingProbe, setAwaitingProbe] = useState<AwaitingProbeState | null>(null);
  const [theta, setTheta] = useState<ThetaState>({ mean: 0, se: Math.sqrt(1.5) });
  const [showDebug, setShowDebug] = useState(false);
  const [pending, setPending] = useState(false);

  // Refs for dynamic autofocus (Fixes autofocus issue)
  const inputRef = useRef<HTMLTextAreaElement>(null);
  const probeInputRef = useRef<HTMLInputElement>(null);

  // Autofocus implementation: Focus the relevant input field when the UI updates, but only if not currently processing a request.
  useEffect(() => {
      if (!pending) {
        if (awaitingProbe) {
            probeInputRef.current?.focus();
        } else if (currentId) {
            // Only focus the main input if there is a current item
            inputRef.current?.focus();
        }
      }
  }, [awaitingProbe, pending, currentId]);


  const currentItem = useMemo(
    () => bank.items.find((it) => it.item_id === currentId),
    [currentId]
  );

  // --- helpers ----------------------------------------------------------------
  function probePromptFor(type: ProbeIntent): string {
    if (type === "Mechanism") return "One sentence: briefly explain the mechanism.";
    if (type === "Alternative") return "In a few words: give one different explanation.";
    if (type === "Boundary") return "One sentence: name a condition where your conclusion would fail.";
    if (type === "Completion") return "Can you give one more different reason?";
    if (type === "Clarify") return "In one sentence: clarify what you meant.";
    return "";
  }

  function probeTextFromServer(turnPayload: TurnResult | undefined): string {
    const t = (turnPayload?.probe_text || "").trim();
    return t.length > 0 ? t : probePromptFor(turnPayload?.probe_type || 'None');
  }

  async function logEvent(type: string, payload: Record<string, any>, specificSessionId?: string): Promise<void> {
    const sid = specificSessionId || sessionId;
    if (!sid) return;

    const entry = {
      ts: new Date().toISOString(),
      session_id: sid,
      user_tag: userTag || null,
      type,
      ...payload
    };
    try { await fetch("/api/log", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(entry) }); } catch {}

    try {
      const key = "rb_local_logs";
      const arr = JSON.parse(localStorage.getItem(key) || "[]");
      arr.push(entry);
      localStorage.setItem(key, JSON.stringify(arr).slice(0, 1_000_000));
    } catch {}
  }

  // --- API calls --------------------------------------------------------------
  async function callAJ({ item, userResponse, twType = null }: { item: ItemInstance, userResponse: string, twType?: ProbeIntent | null }): Promise<AJJudgment> {
    try {
        const schemaFeatures = bank.schema_features[item.schema_id] || {};
        const ajGuidance = schemaFeatures.aj_guidance || undefined;

        const features: AJFeatures = {
          schema_id: item.schema_id,
          item_id: item.item_id,
          family: item.family,
          coverage_tag: item.coverage_tag,
          band: item.band,
          item_params: { a: item.a, b: item.b },
          expect_direction_word: item.family.startsWith("C3") || item.family.startsWith("C6"),
          expected_list_count: item.family.startsWith("C1") ? 2 : undefined,
          tw_type: twType,
          aj_guidance: ajGuidance
        };

        const res = await fetch("/api/aj", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ item, userResponse, features })
        });
        if (!res.ok) {
          const text = await res.text();
          throw new Error(`AJ HTTP ${res.status}: ${text.slice(0, 800)}`);
        }
        return await res.json();
      } catch (e) {
        alert(`AJ error: ${(e as Error).message}`);
        return {
          labels: { Novel: 1.0 } as Record<AJLabel, number>,
          pitfalls: {},
          process_moves: {},
          calibrations: { p_correct: 0.0, confidence: 0.2 },
          extractions: { direction_word: null, key_phrases: [] },
          probe: { intent: "None", text: "", rationale: "", confidence: 0.0 }
        };
      }
  }

  async function callTurn({ sessionId, itemId, ajMeasurement, twMeasurement = null }: { sessionId: string, itemId: string, ajMeasurement: AJJudgment, twMeasurement?: AJJudgment | null }): Promise<TurnResult> {
    try {
      const res = await fetch("/api/turn", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ sessionId, itemId, ajMeasurement, twMeasurement })
      });
      if (!res.ok) {
        const err = await res.json().catch(() => ({}));
        throw new Error(err?.error || `Turn HTTP ${res.status}`);
      }
      return await res.json();
    } catch (e) {
      alert(`Controller error: ${(e as Error).message}`);
      const nextSafe =
        bank.items.find((it) => it.item_id !== itemId)?.item_id || itemId;
      return {
        final_label: "Novel",
        probe_type: "None",
        probe_text: "",
        next_item_id: nextSafe,
        theta_mean: 0,
        theta_var: 1.5,
        coverage_counts: {},
        trace: [`Controller error: ${(e as Error).message}`]
      };
    }
  }

  // --- submit handlers --------------------------------------------------------
  async function onSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (!input.trim() || pending || !currentItem || !sessionId) return;
    setPending(true);

    const aj = await callAJ({ item: currentItem, userResponse: input });
    const turn = await callTurn({ sessionId, itemId: currentItem.item_id, ajMeasurement: aj });

    setHistory((h) => [
        ...h,
        {
          item_id: currentItem.item_id,
          text: currentItem.text,
          answer: input,
          label: turn.final_label,
          probe_type: turn.probe_type,
          probe_text: (turn.probe_text || ""),
          trace: turn.trace
        }
      ]);
      setLog((lines) => [...lines, ...turn.trace, "—"]);
      setTheta({ mean: Number(turn.theta_mean.toFixed(2)), se: Number(Math.sqrt(turn.theta_var).toFixed(2)) });

      await logEvent("item_answered", {
        item_id: currentItem.item_id,
        label: turn.final_label,
        probe_type: turn.probe_type,
        pitfalls: aj.pitfalls,
        process_moves: aj.process_moves
      });

      const prompt = probeTextFromServer(turn);
      const hasProbe = !!(turn.probe_type && turn.probe_type !== "None" && prompt);

      if (hasProbe) {
        setAwaitingProbe({
          probeType: turn.probe_type,
          prompt,
          pending: { aj, next_item_id: turn.next_item_id }
        });
      } else {
        setCurrentId(turn.next_item_id || "");
      }

      setInput("");
      setPending(false);
  }

  async function onSubmitProbe(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (!awaitingProbe || !probeInput.trim() || pending || !currentItem || !sessionId) return;
    setPending(true);

    const tw = await callAJ({
      item: currentItem,
      userResponse: probeInput,
      twType: awaitingProbe.probeType
    });

    const merged = await callTurn({
      sessionId,
      itemId: currentItem.item_id,
      ajMeasurement: awaitingProbe.pending.aj,
      twMeasurement: tw
    });

    setLog((lines) => [...lines, ...merged.trace, "—"]);
    setTheta({ mean: Number(merged.theta_mean.toFixed(2)), se: Number(Math.sqrt(merged.theta_var).toFixed(2)) });

    setCurrentId(merged.next_item_id || "");

    setHistory((h) => {
      const last = h[h.length - 1];
      const updated: HistoryEntry = { ...last, probe_answer: probeInput, probe_label: awaitingProbe.probeType };
      return [...h.slice(0, -1), updated];
    });

    await logEvent("probe_answered", {
      item_id: currentItem.item_id,
      probe_type: awaitingProbe.probeType
    });

    setAwaitingProbe(null);
    setProbeInput("");
    setPending(false);
  }

  // --- Session Management -----------------------------------------------------
    async function initializeSession() {
        setSessionInitialized(false);

        const id = (typeof crypto !== "undefined" && crypto.randomUUID) ? crypto.randomUUID() : String(Date.now());

        setSessionId(id);
        setCurrentId(initialItemId);
        setHistory([]);
        setLog([]);
        setAwaitingProbe(null);
        setInput("");
        setProbeInput("");

        try {
            const res = await fetch('/api/create_session', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ sessionId: id, userTag: userTag || null })
            });

            if (!res.ok) {
                throw new Error("Failed to initialize session in database.");
            }

            const sessionData = await res.json();

            setTheta({
                mean: Number(sessionData.thetaMean.toFixed(2)),
                se: Number(Math.sqrt(sessionData.thetaVar).toFixed(2))
            });

            setSessionInitialized(true);

            if (initialItemId) {
                const startEvent = {
                    ts: new Date().toISOString(),
                    session_id: id,
                    user_tag: userTag || null,
                    type: "session_start",
                    item_id: initialItemId
                };
                await fetch("/api/log", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(startEvent) });
            }
        } catch (e) {
            console.error("Session initialization failed:", e);
            alert("Error initializing session. Please check the database connection.");
            setSessionId(null);
            setSessionInitialized(true);
        }
    }

    async function endSession() {
        logEvent("session_end_manual", { item_count: history.length });
        alert("Session ended. Visit /admin to view the log.");
         setCurrentId("");
      }

  useEffect(() => {
    initializeSession();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // --- Loading/Error States (Tailwind Styled) ---------------------------------------------------
  if (!sessionInitialized) {
    return <div className="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8 text-muted-foreground">Initializing session...</div>;
  }

  if (!sessionId) {
    return <div className="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8 text-red-600">Session initialization failed. Please try refreshing the page.</div>;
  }

  if (!currentItem) {
    if (history.length > 0 && !pending) {
        // Completion Screen
        return (
            <div className="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
                <h1 className="text-3xl font-bold leading-tight tracking-tight text-foreground mb-6">Assessment Complete</h1>
                <div className="bg-card shadow-sm border border-border rounded-xl p-6 mb-6">
                    <p className="text-lg mb-4">Thank you for participating. Your session has ended.</p>
                    <p className="text-lg font-semibold">Final Theta Estimate: {theta.mean} (SE: {theta.se})</p>
                </div>
                <div className="flex gap-4">
                    {/* Primary Button Style */}
                    <button className="px-6 py-2 text-base font-semibold rounded-lg shadow-sm bg-primary text-white hover:bg-primary-hover transition duration-150" onClick={initializeSession}>Start New Session</button>
                    {/* Secondary Button Style */}
                    <a className="px-6 py-2 text-base font-semibold rounded-lg bg-card text-foreground border border-border hover:bg-gray-50 transition duration-150 inline-flex items-center" href="/admin">View Admin Logs</a>
                </div>
            </div>
        );
    }
     if (!initialItemId) {
        return <div className="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8 text-red-600">Error: Item Bank is empty or failed to load.</div>;
    }
    return <div className="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8 text-muted-foreground">Loading...</div>;
  }


  // --- render -----------------------------------------------------------------
  return (
    // Main container styling
    <div className="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
      <h1 className="text-3xl font-bold leading-tight tracking-tight text-foreground mb-6">
        Reasoning Demo — Causal Structure (Pilot)
      </h1>

      {/* Metadata Bar (Subhead) */}
      <div className="flex flex-wrap gap-3 p-4 bg-card border border-border rounded-xl mb-6 items-center shadow-sm">
        {/* Badge Styling */}
        <span className="inline-flex items-center gap-2 px-3 py-1 text-sm text-muted-foreground bg-card border border-border rounded-full"><strong>θ</strong>&nbsp;{theta.mean}</span>
        <span className="inline-flex items-center gap-2 px-3 py-1 text-sm text-muted-foreground bg-card border border-border rounded-full"><strong>SE</strong>&nbsp;{theta.se}</span>
        <span className="hidden sm:inline-flex items-center gap-2 px-3 py-1 text-sm text-muted-foreground bg-card border border-border rounded-full">Item: {currentItem.item_id}</span>
        <span className="hidden md:inline-flex items-center gap-2 px-3 py-1 text-sm text-muted-foreground bg-card border border-border rounded-full">Tag: {currentItem.coverage_tag}</span>
        <span className="hidden lg:inline-flex items-center gap-2 px-3 py-1 text-sm text-muted-foreground bg-card border border-border rounded-full">Session: {sessionId?.slice(0, 8)}</span>

        <div className="flex items-center gap-3 ml-auto">
            <label className="text-sm text-muted-foreground">Initials (optional)</label>
            {/* Input styling ensures correct width and appearance */}
            <input
                className="w-28 px-3 py-1 text-sm border border-input-border rounded-lg focus:ring-primary focus:border-primary transition duration-150"
                value={userTag}
                onChange={(e) => setUserTag(e.target.value)}
                placeholder="ABC"
            />
             <a className="text-primary hover:text-primary-hover font-medium text-sm ml-4" href="/admin" title="Admin log">Admin</a>
        </div>
      </div>


      {/* Main Assessment Card */}
      <section className="bg-card shadow-sm border border-border rounded-xl p-6">

        {/* Question Prompt (Now using Markdown) */}
        <Prose>{currentItem.text}</Prose>

        {!awaitingProbe && (
          <form onSubmit={onSubmit}>
            {/* Textarea styling ensures correct width and appearance (Fixes overflow) */}
            <textarea
              ref={inputRef} // Attach ref for autofocus
              className="w-full px-4 py-3 text-base border border-input-border rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition duration-150 ease-in-out resize-vertical"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Your answer (few words or one sentence)"
              rows={3}
            />
            <div className="flex flex-wrap gap-3 mt-4">
                {/* Button Styling */}
              <button type="submit" className="px-6 py-2 text-base font-semibold rounded-lg shadow-sm bg-primary text-white hover:bg-primary-hover disabled:opacity-50 transition duration-150" disabled={pending}>
                {pending ? 'Processing...' : 'Submit'}
              </button>
              <button type="button" className="px-6 py-2 text-base font-semibold rounded-lg bg-card text-foreground border border-border hover:bg-gray-50 transition duration-150" onClick={() => setShowDebug((s) => !s)}>
                {showDebug ? "Hide debug" : "Show debug"}
              </button>
              <button type="button" className="px-6 py-2 text-base font-semibold rounded-lg bg-card text-foreground border border-border hover:bg-gray-50 transition duration-150" onClick={endSession}>
                End Session
              </button>
               <button type="button" className="px-6 py-2 text-base font-semibold rounded-lg bg-card text-foreground border border-border hover:bg-gray-50 transition duration-150" onClick={initializeSession}>
                Reset
              </button>
            </div>
          </form>
        )}

        {awaitingProbe && (
          <form onSubmit={onSubmitProbe}>
            {/* Probe Styling (Blue highlight) */}
            <div className="bg-primary-light border border-primary-border text-primary-text p-4 rounded-lg italic mb-4">
                {awaitingProbe.prompt}
            </div>
            <input
              ref={probeInputRef} // Attach ref for autofocus
              className="w-full px-4 py-3 text-base border border-input-border rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition duration-150 ease-in-out"
              value={probeInput}
              onChange={(e) => setProbeInput(e.target.value)}
              placeholder="One sentence"
            />
            <div className="flex flex-wrap gap-3 mt-4">
              <button type="submit" className="px-6 py-2 text-base font-semibold rounded-lg shadow-sm bg-primary text-white hover:bg-primary-hover disabled:opacity-50 transition duration-150" disabled={pending}>
                {pending ? 'Processing...' : 'Submit follow-up'}
              </button>
              <button type="button" className="px-6 py-2 text-base font-semibold rounded-lg bg-card text-foreground border border-border hover:bg-gray-50 transition duration-150" onClick={() => setShowDebug((s) => !s)}>
                {showDebug ? "Hide debug" : "Show debug"}
              </button>
            </div>
          </form>
        )}
      </section>

       {/* Debug Sections */}
       {showDebug && (
        <section className="mt-8">
          <h3 className="text-xl font-semibold mb-4">Session Trace (debug)</h3>
          {/* Dark background for debug trace */}
          <div className="font-mono text-sm bg-gray-900 text-blue-200 rounded-lg p-4 whitespace-pre-wrap overflow-auto max-h-72 shadow-inner">
            {log.join("\n")}
          </div>

          <h4 className="text-lg font-semibold mt-4 mb-2">Current Item Guidance (AJ)</h4>
          <div className="font-mono text-sm bg-gray-800 text-gray-400 rounded-lg p-4 whitespace-pre-wrap overflow-auto max-h-40 shadow-inner">
            {bank.schema_features[currentItem.schema_id]?.aj_guidance || "No specific guidance."}
          </div>
        </section>
      )}

      {/* History Section */}
      <section className="mt-10">
        <h3 className="text-xl font-semibold mb-4">History</h3>
        <div className="space-y-8">
        {history.map((h, index) => (
          <div key={`${h.item_id}-${index}`} className="border-t border-border pt-6">
            <div className="flex justify-between items-center mb-3">
                <strong className="text-foreground">{h.item_id}</strong>
                {/* Simple color coding for history labels */}
                <span className={`text-sm font-medium ${h.label.startsWith('Correct') ? 'text-green-600' : h.label === 'Partial' ? 'text-yellow-600' : 'text-red-600'}`}>
                    {h.label} {h.probe_type !== "None" ? `(+Probe)` : ""}
                </span>
            </div>
            <div className="text-muted-foreground mb-3">
                {/* Use Prose helper for history text as well */}
                <Prose>{h.text}</Prose>
            </div>
            <div className="italic text-foreground p-3 bg-gray-50 rounded-lg">Ans: {h.answer}</div>
            {h.probe_answer && <div className="italic text-foreground mt-2 ml-4 p-3 bg-primary-light rounded-lg">Probe: {h.probe_answer}</div>}
          </div>
        ))}
        </div>
      </section>
    </div>
  );
}
